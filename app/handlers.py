from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, URLInputFile, InputFile, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.methods.send_audio import SendAudio
from aiogram.utils.chat_action import ChatActionSender
import keyboards
from functions import NBScoinRPC
from database import Database
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()


nbscoin_rpc = NBScoinRPC()
db = Database()

TELEGRAM_BOT_TOKEN=os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TELEGRAM_BOT_TOKEN)

rt = Router()

class TransactionState(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()
    waiting_for_confirmation = State()

class GetUserIdState(StatesGroup):
    user_id = State()

class GetUserIdState1(StatesGroup):
    user_id = State()

class GetTXIDState(StatesGroup):
    txid = State()


@rt.message(CommandStart())
async def start(message: Message, menu: InlineKeyboardMarkup):
    user = message.from_user
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NBScoin –±–æ—Ç.\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)
    

@rt.callback_query(F.data == "wallet")
async def wallet(callback: CallbackQuery):
    user_id = callback.from_user.id
    address = str(db.get_user(user_id)[2])
    balance = nbscoin_rpc.get_balance(account=address)
    await bot.send_message(callback.from_user.id, text=f"–ë–∞–ª–∞–Ω—Å: {balance} NBS Coin")

@rt.callback_query(F.data == "upbalance")
async def up_balance(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")



# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é)
async def process_transaction(wallet: str, amount: float):
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {amount} –Ω–∞ –∫–æ—à–µ–ª—ë–∫ {wallet}")


# –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
@rt.callback_query(F.data == "send_coins")
async def send_coins(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
    await state.set_state(TransactionState.waiting_for_wallet)
    await callback.answer()

# –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
@rt.message(TransactionState.waiting_for_wallet)
async def get_wallet(message: Message, state: FSMContext):
    wallet = message.text.strip()
    await state.update_data(wallet=wallet)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(TransactionState.waiting_for_amount)

# –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
@rt.message(TransactionState.waiting_for_amount)
async def get_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return

    await state.update_data(amount=amount)
    data = await state.get_data()
    
    wallet = data["wallet"]

    await message.answer(f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ {amount} NBS Coin –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n{wallet}", 
                        reply_markup=keyboards.confirm_keyboard)
    await state.set_state(TransactionState.waiting_for_confirmation)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@rt.callback_query(F.data == "confirm_payment")
async def confirm_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    address = data["wallet"]
    amount = data["amount"]

    await callback.message.edit_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
    await process_transaction(wallet, amount)
    txid = nbscoin_rpc.send_to_address(address, amount)
    await callback.message.edit_text(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! TXID:\n{txid}")
    await state.clear()
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@rt.callback_query(F.data == "cancel_payment")
async def cancel_transaction(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()



@rt.callback_query(F.data == "get_coins")
async def get_coins(callback: CallbackQuery):
    user_id = callback.from_user.id
    adress = db.get_user(user_id=user_id)[2]
    await bot.send_message(user_id, f"–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n{adress}")

@rt.callback_query(F.data == "ban")
async def ban_user(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(GetUserIdState.user_id)
    await callback.answer()

@rt.message(GetUserIdState.user_id)
async def get_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        ban = db.ban_user(user_id)
        if ban:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await state.clear()
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
    except:
        await message.answer("ID –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π")
        await state.clear()

@rt.callback_query(F.data == "unban")
async def unban_user(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(GetUserIdState1.user_id)
    await callback.answer()

@rt.message(GetUserIdState1.user_id)
async def get_user_id1(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        unban = db.unban_user(user_id)
        if unban:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await state.clear()
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
    except:
        await message.answer("ID –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π")
        await state.clear()

@rt.callback_query(F.data == "withdraw")
async def withdraw(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")

@rt.callback_query(F.data == "p2p")
async def p2p(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ.")

@rt.callback_query(F.data == "support")
async def support(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç!", reply_markup=keyboards.support_button)


@rt.callback_query(F.data == "check_transaction")
async def check_transaction(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ TXID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
    await state.set_state(GetTXIDState.txid)
    await callback.answer()

@rt.message(GetTXIDState.txid)
async def get_transaction_txid(message: Message, state: FSMContext):
    txid = message.text
    tx = nbscoin_rpc.get_transaction(txid)
    if tx:
        await message.answer(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx['confirmations']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
        await state.clear()
    else:
        await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()

@rt.callback_query(F.data == "get_transaction")
async def get_transactions(callback: CallbackQuery):
    txs = nbscoin_rpc.list_transactions()
    response = "\n".join([f"{tx['category']}: {tx['amount']} NBS ({tx['txid']})" for tx in txs]) if txs else "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
    await bot.send_message(callback.from_user.id, response)
    await callback.answer()